{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","api/api.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","setWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","App","initialState","undefined","useState","state","setState","then","data","cod","Math","floor","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOAQeA,G,MANA,kBACb,6BACE,wBAAIC,UAAU,0BAAd,kBACA,uBAAGA,UAAU,6BAAb,+CCKWC,EARF,SAAAC,GAAK,OAChB,0BAAMC,SAAUD,EAAME,YACpB,2BAAOC,KAAK,OAAOC,KAAK,OAAQC,YAAY,YAC5C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCwBWC,EA5BC,SAAAN,GAAK,OACnB,yBAAKF,UAAU,iBAEXE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,YAC7B,0BAAMA,UAAU,kBAAhB,KAAoCE,EAAMO,KAA1C,IAAiDP,EAAMQ,UAIzDR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,eACnB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,cAI3CT,EAAMU,UAAY,uBAAGZ,UAAU,gBAAb,YAChB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMU,WAI3CV,EAAMW,aAAe,uBAAGb,UAAU,gBAAb,eACnB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,cAI3CX,EAAMY,OAAS,uBAAGd,UAAU,kBAAkBE,EAAMY,S,uBCvB7CC,EAAU,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACxBD,EAAEE,iBACIT,EAAOO,EAAEG,OAAOC,SAASX,KAAKY,MAC9BX,EAAUM,EAAEG,OAAOC,SAASV,QAAQW,MAHlB,SAKDC,MAAM,oDAAD,OAAqDb,EAArD,YAA6DC,EAA7D,kBAPd,qCAEU,cAKlBa,EALkB,gBAMXA,EAASC,OANE,mFAAH,sDCoERC,EA9DH,WACV,IAAMC,EAAe,CACnBf,iBAAagB,EACblB,UAAMkB,EACNjB,aAASiB,EACTf,cAAUe,EACVd,iBAAac,EACbb,WAAOa,GAPO,EAUUC,mBAASF,GAVnB,mBAUTG,EAVS,KAUFC,EAVE,KAqChB,OACE,yBAAK9B,UAAU,WACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAjCG,SAACY,GAClBD,EAAWC,GAAGe,MAAK,SAAAC,GACA,MAAbA,EAAKC,IACPH,EAAS,CACPnB,YAAauB,KAAKC,MAAkC,KAA3BH,EAAKI,KAAKC,KAAO,SAAiB,IAC3D5B,KAAMuB,EAAK1B,KACXI,QAASsB,EAAKM,IAAI5B,QAClBE,SAAUoB,EAAKI,KAAKxB,SACpBC,YAAamB,EAAKO,QAAQ,GAAG1B,YAC7BC,WAAOa,IAGTG,EAAS,CACPnB,iBAAagB,EACblB,UAAMkB,EACNjB,aAASiB,EACTf,cAAUe,EACVd,iBAAac,EACbb,MAAO,+BAgBL,kBAAC,EAAD,CACEH,YAAakB,EAAMlB,YACnBF,KAAMoB,EAAMpB,KACZC,QAASmB,EAAMnB,QACfE,SAAUiB,EAAMjB,SAChBC,YAAagB,EAAMhB,YACnBC,MAAOe,EAAMf,aChDP0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.0bde06e4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n  <div>\r\n    <h1 className=\"title-container__title\">Weather Finder</h1>\r\n    <p className=\"title-container__subtitle\">Find out temperature conditions and more</p>\r\n  </div>\r\n)\r\nexport default Titles","import React from 'react';\r\n\r\nconst Form = props =>(\r\n  <form onSubmit={props.setWeather}>\r\n    <input type=\"text\" name=\"city\"  placeholder=\"City...\"/>\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n    <button>Get weather</button>\r\n  </form>\r\n)\r\n\r\nexport default Form","import React from 'react';\r\n\r\nconst Weather = props => (\r\n  <div className=\"weather__info\">\r\n    {\r\n      props.city && props.country && <p className=\"weather__key\">Location:\r\n        <span className=\"weather__value\">  {props.city},{props.country}</span>\r\n      </p>\r\n    }\r\n    {\r\n      props.temperature && <p className=\"weather__key\">Temperature:\r\n        <span className=\"weather__value\"> {props.temperature}</span>\r\n      </p>\r\n    }\r\n    {\r\n      props.humidity && <p className=\"weather__key\">Humidity:\r\n        <span className=\"weather__value\"> {props.humidity}</span>\r\n      </p>\r\n    }\r\n    {\r\n      props.description && <p className=\"weather__key\">Description:\r\n        <span className=\"weather__value\"> {props.description}</span>\r\n      </p>\r\n    }\r\n    {\r\n      props.error && <p className=\"weather__error\">{props.error}</p>\r\n    }\r\n  </div>\r\n);\r\n\r\nexport default Weather","const API_KEY = \"f8dc6dde64f4ff6c4dad96aa23c96bc4\";\r\n\r\nexport const getWeather = async (e) => {\r\n  e.preventDefault();\r\n  const city = e.target.elements.city.value;\r\n  const country = e.target.elements.country.value;\r\n\r\n  const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\r\n  return await api_call.json()\r\n};\r\n\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport { getWeather } from \"./api/api\";\n\n\nconst App = () => {\n  const initialState = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  };\n\n  const [state, setState] = useState(initialState);\n\n  const setWeather = (e) => {\n    getWeather(e).then(data => {\n      if (data.cod === 200) {\n        setState({\n          temperature: Math.floor((data.main.temp - 273.15) * 100) / 100,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: undefined\n        })\n      } else {\n        setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: 'Please enter a value',\n        })\n      }\n\n    })\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"container\">\n        <div className=\"row main\">\n          <div className=\"col-lg-5 title-container\">\n            <Titles />\n          </div>\n          <div className=\"col-lg-7 form-container\">\n            <Form setWeather={setWeather} />\n            <Weather\n              temperature={state.temperature}\n              city={state.city}\n              country={state.country}\n              humidity={state.humidity}\n              description={state.description}\n              error={state.error}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n  )\n\n};\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}